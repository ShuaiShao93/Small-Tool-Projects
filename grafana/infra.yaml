
"CPU Usage":
  query: max by(origin_prometheus, pod) (container_memory_usage_bytes{container=~"api.*|postgres.*", origin_prometheus=~"$customer"})
  legend: Usage {{origin_prometheus}} {{pod}}
  unit: bytes

"CPU Limit":
  query: max by(pod, origin_prometheus) (kube_pod_container_resource_limits{container=~"api.*|postgres.*", origin_prometheus=~"$customer", resource="memory"})
  legend: Limit {{origin_prometheus}} {{pod}}
  unit: bytes

"Memory Usage":
  query: max by(origin_prometheus, pod) (container_memory_usage_bytes{container=~"api.*|postgres.*", origin_prometheus=~"$customer"})
  legend: Usage {{origin_prometheus}} {{pod}}
  unit: bytes

"Pod Failure":
  queryA: sum by(pod, origin_prometheus) (increase(kube_pod_container_status_restarts_total{namespace=~".*X.*"}[5m]))
  queryB: sum by(pod, origin_prometheus) (kube_pod_status_phase{namespace=~".*X.*", phase="Failed"})
  exprD: $A || $B
  legend: {{origin_prometheus}} {{pod}}

"Pod err pull image":
  query: sum by(pod, origin_prometheus) (kube_pod_container_status_waiting_reason{namespace=~".*X.*", reason=~"ImagePullBackOff|ErrImagePull"})

"Unscheduleable Pod"
  queryA:  
sum by(pod, origin_prometheus) (
  min_over_time(
    kube_pod_status_phase{
      namespace=~".*X.*",
      phase="Pending",
      pod!~".*Y.*"
    }[1h]
  )
)
  queryB: sum by(pod, origin_prometheus) (kube_pod_status_phase{namespace=~".*X.*", phase="Pending"})
  exprC: $A && $B
  thresholdD: > 0

"Failing HPA"
  queryA: 
sum by(horizontalpodautoscaler, origin_prometheus) (
  kube_horizontalpodautoscaler_status_condition{condition="AbleToScale", status="false"}
)
  queryB:
sum by(horizontalpodautoscaler, origin_prometheus) (
  kube_horizontalpodautoscaler_status_condition{condition="ScalingActive", status="false"}
)
  exprC: $A || $B
  
